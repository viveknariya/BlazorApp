@page "/EditUser/{email?}"
@using BlazorApp.Data;
@using BlazorApp.Models;
@using Microsoft.AspNetCore.Components.Forms
@inject IUserService UserService;
<h3>EditUser</h3>
@if (addEditUser == null)
{
    <h4>Loading...</h4>
}
else
{
    <EditForm Model="@addEditUser" OnValidSubmit="Edit" OnInvalidSubmit="InvalidEntry">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <div>
            <label>First Name</label>
            <InputText class="form-control" @bind-Value="addEditUser.FirstName" />
            <ValidationMessage For="@(() => addEditUser.FirstName)"></ValidationMessage>
        </div>
        <div>
            <label>Last Name</label>
            <InputText class="form-control" @bind-Value="addEditUser.LastName" />
            <ValidationMessage For="@(() => addEditUser.LastName)"></ValidationMessage>
        </div>
        <div>
            <label>Password</label>
            <InputText type="password" class="form-control" @bind-Value="addEditUser.Password" />
            <ValidationMessage For="@(() => addEditUser.Password)"></ValidationMessage>
        </div>
        <div>
            <label>Confirm Password</label>
            <InputText type="password" class="form-control" @bind-Value="addEditUser.ConfirmPassword" />
            <ValidationMessage For="@(() => addEditUser.ConfirmPassword)"></ValidationMessage>
        </div>
        <div>
            <label>Role</label>
            <InputSelect class="form-control" @bind-Value="addEditUser.Role">
                <option value="Admin">Admin</option>
                <option value="User">User</option>
            </InputSelect>
            <ValidationMessage For="@(() => addEditUser.Role)"></ValidationMessage>
        </div>
        <div class="mt-2">
            <button class="btn btn-primary" type="submit">Edit User</button>
        </div>
    </EditForm>
}
@code {
    [Parameter]
    public string? email { get; set; }
    public AddEditUser addEditUser;
    private User editUser;

    protected override async Task OnInitializedAsync()
    {
        addEditUser = new();
        editUser = new();

        editUser = await UserService.GetByEmailAsync(email);
        if (editUser != null && editUser.Email == email)
        {
            addEditUser.Email = email;
            addEditUser.FirstName = editUser.FirstName;
            addEditUser.LastName = editUser.LastName;
            addEditUser.Password = editUser.Password;
            addEditUser.Role = editUser.Role;
        }
    }

    private void resetValue()
    {
        addEditUser = new();
        editUser = new();
        Console.WriteLine("Reset Value");
    }

    private async Task Edit()
    {
        editUser.Email = email;
        editUser.FirstName = addEditUser.FirstName;
        editUser.LastName = addEditUser.LastName;
        editUser.Password = addEditUser.Password;
        editUser.Role = addEditUser.Role;

        await UserService.UpdateAsync(editUser);

        resetValue();
    }
    private async void InvalidEntry()
    {
        Console.WriteLine("InvalidEntry");
    }

}
